
main 328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a90  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000a90  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cd0  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab5  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020f  00000000  00000000  00003ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eed  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000098a  0000098a  00000a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.TWI_Init 0000000c  0000095c  0000095c  00000a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.TWI_Start 00000046  00000758  00000758  0000084c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.TWI_Stop 0000000c  00000968  00000968  00000a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.TWI_Write_block 00000014  00000916  00000916  00000a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.LCD_Command 00000050  0000061c  0000061c  00000710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.LCD_Data 00000050  0000066c  0000066c  00000760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.LCD_Init 00000038  000007de  000007de  000008d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.LCD_Clear 00000014  0000092a  0000092a  00000a1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.LCD_String 00000040  0000079e  0000079e  00000892  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.LCD_SetCursor 00000036  00000816  00000816  0000090a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.SPI_Init 0000000e  0000094e  0000094e  00000a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.SPI_Transmit 0000000c  00000974  00000974  00000a68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.mfrc522_write 00000026  0000084c  0000084c  00000940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.mfrc522_read 00000022  00000898  00000898  0000098c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.mfrc522_reset 0000000a  00000980  00000980  00000a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.mfrc522_init 0000004c  0000070c  0000070c  00000800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.mfrc522_to_card 000001fe  0000033c  0000033c  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.mfrc522_request 0000006a  000005b2  000005b2  000006a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.mfrc522_get_card_serial 00000078  0000053a  0000053a  0000062e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.CheckCard 00000050  000006bc  000006bc  000007b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.GPIO_Init 00000010  0000093e  0000093e  00000a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.On_LED  00000016  000008ea  000008ea  000009de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Off_LED 00000018  000008ba  000008ba  000009ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.Uart_Init 00000018  000008d2  000008d2  000009c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.Uart_Tx 00000026  00000872  00000872  00000966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .progmemx.data 0000006b  000000ce  000000ce  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 41 .text.main    00000202  0000013a  0000013a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss.state    00000001  0080011d  0080011d  00000a90  2**0
                  ALLOC
 43 .data.RFID_Blue 00000004  00800119  00000998  00000a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 44 .text.__dummy_fini 00000002  00000992  00000992  00000a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_funcs_on_exit 00000002  00000994  00000994  00000a88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_simulator_exit 00000002  00000996  00000996  00000a8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.exit    00000016  00000900  00000900  000009f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text._Exit   00000004  0000098e  0000098e  00000a82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
   8:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
   c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  10:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  14:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  18:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  1c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  20:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  24:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  28:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  2c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  30:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  34:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  38:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  3c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  40:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  44:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  48:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  4c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  50:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  54:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  58:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  5c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  60:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>
  64:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 19       	sub	r16, r1
  6c:	80 01       	movw	r16, r0
  6e:	19 01       	movw	r2, r18
  70:	1d 00       	.word	0x001d	; ????
  72:	09 98       	cbi	0x01, 1	; 1
  74:	01 1d       	adc	r16, r1
  76:	01 1e       	adc	r0, r17
  78:	80 00       	.word	0x0080	; ????

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__do_clear_bss+0x8>
  8e:	b5 91       	lpm	r27, Z+
  90:	a5 91       	lpm	r26, Z+
  92:	35 91       	lpm	r19, Z+
  94:	25 91       	lpm	r18, Z+
  96:	05 91       	lpm	r16, Z+
  98:	07 fd       	sbrc	r16, 7
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <__do_clear_bss>
  9c:	95 91       	lpm	r25, Z+
  9e:	85 91       	lpm	r24, Z+
  a0:	ef 01       	movw	r28, r30
  a2:	f9 2f       	mov	r31, r25
  a4:	e8 2f       	mov	r30, r24
  a6:	05 90       	lpm	r0, Z+
  a8:	0d 92       	st	X+, r0
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0x20>
  b0:	fe 01       	movw	r30, r28
  b2:	04 c0       	rjmp	.+8      	; 0xbc <__do_clear_bss+0x8>

000000b4 <__do_clear_bss>:
  b4:	1d 92       	st	X+, r1
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__do_clear_bss>
  bc:	e9 37       	cpi	r30, 0x79	; 121
  be:	f4 07       	cpc	r31, r20
  c0:	31 f7       	brne	.-52     	; 0x8e <__do_copy_data+0x8>
  c2:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  c6:	0c 94 80 04 	jmp	0x900	; 0x900 <exit>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>

Disassembly of section .text:

0000098a <__bad_interrupt>:
 98a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.TWI_Init:

0000095c <TWI_Init>:
uint8_t str[MAX_LEN];
char Key[5], key_pressed;

///////////////////////////////////////// I2C ////////////////////////////////////////////
void TWI_Init(){
	TWSR = 0x00;													//Prescaler = 1
 95c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0x20;													//SCL freq = 100kHz
 960:	80 e2       	ldi	r24, 0x20	; 32
 962:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 966:	08 95       	ret

Disassembly of section .text.TWI_Start:

00000758 <TWI_Start>:
		data++;
	}
	
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	c8 2f       	mov	r28, r24
 75e:	d6 2f       	mov	r29, r22
 760:	84 ea       	ldi	r24, 0xA4	; 164
 762:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 766:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 76a:	88 23       	and	r24, r24
 76c:	e4 f7       	brge	.-8      	; 0x766 <TWI_Start+0xe>
 76e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 772:	88 7f       	andi	r24, 0xF8	; 248
 774:	88 30       	cpi	r24, 0x08	; 8
 776:	11 f0       	breq	.+4      	; 0x77c <TWI_Start+0x24>
 778:	0e 94 ae 04 	call	0x95c	; 0x95c <TWI_Init>
 77c:	6c 2f       	mov	r22, r28
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	6d 2b       	or	r22, r29
 786:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 78a:	84 e8       	ldi	r24, 0x84	; 132
 78c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 790:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 794:	88 23       	and	r24, r24
 796:	e4 f7       	brge	.-8      	; 0x790 <TWI_Start+0x38>
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

Disassembly of section .text.TWI_Stop:

00000968 <TWI_Stop>:
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
}
void TWI_Stop()
{
	TWCR = TWI_STOP;
 968:	84 e9       	ldi	r24, 0x94	; 148
 96a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWI_Init();
 96e:	0e 94 ae 04 	call	0x95c	; 0x95c <TWI_Init>
 972:	08 95       	ret

Disassembly of section .text.TWI_Write_block:

00000916 <TWI_Write_block>:
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
}
void TWI_Write_block(uint8_t Data)
{
	TWDR = Data;
 916:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_READ_NACK;												//TWCR = (1<<TWINT)|(1<<TWEN);
 91a:	84 e8       	ldi	r24, 0x84	; 132
 91c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 920:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 924:	88 23       	and	r24, r24
 926:	e4 f7       	brge	.-8      	; 0x920 <TWI_Write_block+0xa>
}
 928:	08 95       	ret

Disassembly of section .text.LCD_Command:

0000061c <LCD_Command>:
		data++;
	}
	
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	c8 2f       	mov	r28, r24
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	87 e2       	ldi	r24, 0x27	; 39
 626:	0e 94 ac 03 	call	0x758	; 0x758 <TWI_Start>
 62a:	dc 2f       	mov	r29, r28
 62c:	d0 7f       	andi	r29, 0xF0	; 240
 62e:	8d 2f       	mov	r24, r29
 630:	8c 60       	ori	r24, 0x0C	; 12
 632:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 636:	8d 2f       	mov	r24, r29
 638:	88 60       	ori	r24, 0x08	; 8
 63a:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 63e:	80 e1       	ldi	r24, 0x10	; 16
 640:	c8 9f       	mul	r28, r24
 642:	e0 01       	movw	r28, r0
 644:	11 24       	eor	r1, r1
 646:	8c 2f       	mov	r24, r28
 648:	8c 60       	ori	r24, 0x0C	; 12
 64a:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 64e:	8c 2f       	mov	r24, r28
 650:	88 60       	ori	r24, 0x08	; 8
 652:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 656:	8f ec       	ldi	r24, 0xCF	; 207
 658:	97 e0       	ldi	r25, 0x07	; 7
 65a:	01 97       	sbiw	r24, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <LCD_Command+0x3e>
 65e:	00 c0       	rjmp	.+0      	; 0x660 <LCD_Command+0x44>
 660:	00 00       	nop
 662:	0e 94 b4 04 	call	0x968	; 0x968 <TWI_Stop>
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

Disassembly of section .text.LCD_Data:

0000066c <LCD_Data>:
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	c8 2f       	mov	r28, r24
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	87 e2       	ldi	r24, 0x27	; 39
 676:	0e 94 ac 03 	call	0x758	; 0x758 <TWI_Start>
 67a:	dc 2f       	mov	r29, r28
 67c:	d0 7f       	andi	r29, 0xF0	; 240
 67e:	8d 2f       	mov	r24, r29
 680:	8d 60       	ori	r24, 0x0D	; 13
 682:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 686:	8d 2f       	mov	r24, r29
 688:	89 60       	ori	r24, 0x09	; 9
 68a:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 68e:	80 e1       	ldi	r24, 0x10	; 16
 690:	c8 9f       	mul	r28, r24
 692:	e0 01       	movw	r28, r0
 694:	11 24       	eor	r1, r1
 696:	8c 2f       	mov	r24, r28
 698:	8d 60       	ori	r24, 0x0D	; 13
 69a:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 69e:	8c 2f       	mov	r24, r28
 6a0:	89 60       	ori	r24, 0x09	; 9
 6a2:	0e 94 8b 04 	call	0x916	; 0x916 <TWI_Write_block>
 6a6:	8f ec       	ldi	r24, 0xCF	; 207
 6a8:	97 e0       	ldi	r25, 0x07	; 7
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCD_Data+0x3e>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCD_Data+0x44>
 6b0:	00 00       	nop
 6b2:	0e 94 b4 04 	call	0x968	; 0x968 <TWI_Stop>
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

Disassembly of section .text.LCD_Init:

000007de <LCD_Init>:
 7de:	8f e2       	ldi	r24, 0x2F	; 47
 7e0:	95 e7       	ldi	r25, 0x75	; 117
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <LCD_Init+0x4>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <LCD_Init+0xa>
 7e8:	00 00       	nop
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 7f0:	88 e2       	ldi	r24, 0x28	; 40
 7f2:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 7f6:	8c e0       	ldi	r24, 0x0C	; 12
 7f8:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 7fc:	86 e0       	ldi	r24, 0x06	; 6
 7fe:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 808:	8f e0       	ldi	r24, 0x0F	; 15
 80a:	97 e2       	ldi	r25, 0x27	; 39
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	f1 f7       	brne	.-4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 810:	00 c0       	rjmp	.+0      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 812:	00 00       	nop
 814:	08 95       	ret

Disassembly of section .text.LCD_Clear:

0000092a <LCD_Clear>:
	LCD_Command(0x01);	//Clear
	_delay_ms(5);

}
void LCD_Clear(){
	LCD_Command(0x01);
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 930:	8f e9       	ldi	r24, 0x9F	; 159
 932:	9f e0       	ldi	r25, 0x0F	; 15
 934:	01 97       	sbiw	r24, 0x01	; 1
 936:	f1 f7       	brne	.-4      	; 0x934 <LCD_Clear+0xa>
 938:	00 c0       	rjmp	.+0      	; 0x93a <LCD_Clear+0x10>
 93a:	00 00       	nop
 93c:	08 95       	ret

Disassembly of section .text.LCD_String:

0000079e <LCD_String>:
		data++;
	}
	
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
 79e:	cf 92       	push	r12
 7a0:	df 92       	push	r13
 7a2:	ef 92       	push	r14
 7a4:	cf 93       	push	r28
 7a6:	6b 01       	movw	r12, r22
 7a8:	e8 2e       	mov	r14, r24
 7aa:	c4 2f       	mov	r28, r20
 7ac:	11 c0       	rjmp	.+34     	; 0x7d0 <LCD_String+0x32>
 7ae:	c1 50       	subi	r28, 0x01	; 1
 7b0:	f6 01       	movw	r30, r12
 7b2:	84 91       	lpm	r24, Z
 7b4:	e7 fc       	sbrc	r14, 7
 7b6:	80 81       	ld	r24, Z
 7b8:	88 23       	and	r24, r24
 7ba:	19 f0       	breq	.+6      	; 0x7c2 <LCD_String+0x24>
 7bc:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_Data>
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <LCD_String+0x2a>
 7c2:	80 e2       	ldi	r24, 0x20	; 32
 7c4:	0e 94 36 03 	call	0x66c	; 0x66c <LCD_Data>
 7c8:	8f ef       	ldi	r24, 0xFF	; 255
 7ca:	c8 1a       	sub	r12, r24
 7cc:	d8 0a       	sbc	r13, r24
 7ce:	e8 0a       	sbc	r14, r24
 7d0:	c1 11       	cpse	r28, r1
 7d2:	ed cf       	rjmp	.-38     	; 0x7ae <LCD_String+0x10>
 7d4:	cf 91       	pop	r28
 7d6:	ef 90       	pop	r14
 7d8:	df 90       	pop	r13
 7da:	cf 90       	pop	r12
 7dc:	08 95       	ret

Disassembly of section .text.LCD_SetCursor:

00000816 <LCD_SetCursor>:
 816:	61 30       	cpi	r22, 0x01	; 1
 818:	51 f0       	breq	.+20     	; 0x82e <LCD_SetCursor+0x18>
 81a:	28 f0       	brcs	.+10     	; 0x826 <LCD_SetCursor+0x10>
 81c:	62 30       	cpi	r22, 0x02	; 2
 81e:	61 f0       	breq	.+24     	; 0x838 <LCD_SetCursor+0x22>
 820:	63 30       	cpi	r22, 0x03	; 3
 822:	79 f0       	breq	.+30     	; 0x842 <LCD_SetCursor+0x2c>
 824:	08 95       	ret
 826:	80 68       	ori	r24, 0x80	; 128
 828:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 82c:	08 95       	ret
 82e:	80 5c       	subi	r24, 0xC0	; 192
 830:	80 68       	ori	r24, 0x80	; 128
 832:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 836:	08 95       	ret
 838:	8c 5e       	subi	r24, 0xEC	; 236
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 840:	08 95       	ret
 842:	8c 5a       	subi	r24, 0xAC	; 172
 844:	80 68       	ori	r24, 0x80	; 128
 846:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_Command>
 84a:	08 95       	ret

Disassembly of section .text.SPI_Init:

0000094e <SPI_Init>:

/////////////////////////////////////////////////////////     RFID      //////////////////////////////////////////////////////////////////

void SPI_Init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 94e:	84 b1       	in	r24, 0x04	; 4
 950:	8c 62       	ori	r24, 0x2C	; 44
 952:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 954:	8c b5       	in	r24, 0x2c	; 44
 956:	81 65       	ori	r24, 0x51	; 81
 958:	8c bd       	out	0x2c, r24	; 44
 95a:	08 95       	ret

Disassembly of section .text.SPI_Transmit:

00000974 <SPI_Transmit>:
}
uint8_t SPI_Transmit(uint8_t data)
{
	SPDR = data;
 974:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 976:	0d b4       	in	r0, 0x2d	; 45
 978:	07 fe       	sbrs	r0, 7
 97a:	fd cf       	rjmp	.-6      	; 0x976 <SPI_Transmit+0x2>
	return SPDR;
 97c:	8e b5       	in	r24, 0x2e	; 46
}
 97e:	08 95       	ret

Disassembly of section .text.mfrc522_write:

0000084c <mfrc522_write>:
		data++;
	}
	
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
 84c:	cf 93       	push	r28
 84e:	c6 2f       	mov	r28, r22
 850:	95 b1       	in	r25, 0x05	; 5
 852:	9b 7f       	andi	r25, 0xFB	; 251
 854:	95 b9       	out	0x05, r25	; 5
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	8e 77       	andi	r24, 0x7E	; 126
 85e:	0e 94 ba 04 	call	0x974	; 0x974 <SPI_Transmit>
 862:	8c 2f       	mov	r24, r28
 864:	0e 94 ba 04 	call	0x974	; 0x974 <SPI_Transmit>
 868:	85 b1       	in	r24, 0x05	; 5
 86a:	84 60       	ori	r24, 0x04	; 4
 86c:	85 b9       	out	0x05, r24	; 5
 86e:	cf 91       	pop	r28
 870:	08 95       	ret

Disassembly of section .text.mfrc522_read:

00000898 <mfrc522_read>:
 898:	95 b1       	in	r25, 0x05	; 5
 89a:	9b 7f       	andi	r25, 0xFB	; 251
 89c:	95 b9       	out	0x05, r25	; 5
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	8e 77       	andi	r24, 0x7E	; 126
 8a6:	80 68       	ori	r24, 0x80	; 128
 8a8:	0e 94 ba 04 	call	0x974	; 0x974 <SPI_Transmit>
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	0e 94 ba 04 	call	0x974	; 0x974 <SPI_Transmit>
 8b2:	95 b1       	in	r25, 0x05	; 5
 8b4:	94 60       	ori	r25, 0x04	; 4
 8b6:	95 b9       	out	0x05, r25	; 5
 8b8:	08 95       	ret

Disassembly of section .text.mfrc522_reset:

00000980 <mfrc522_reset>:
	DISABLE_CHIP();
	return data;
}
void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 980:	6f e0       	ldi	r22, 0x0F	; 15
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 988:	08 95       	ret

Disassembly of section .text.mfrc522_init:

0000070c <mfrc522_init>:
		data++;
	}
	
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
 70c:	0e 94 c0 04 	call	0x980	; 0x980 <mfrc522_reset>
 710:	6d e8       	ldi	r22, 0x8D	; 141
 712:	8a e2       	ldi	r24, 0x2A	; 42
 714:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 718:	6e e3       	ldi	r22, 0x3E	; 62
 71a:	8b e2       	ldi	r24, 0x2B	; 43
 71c:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 720:	6e e1       	ldi	r22, 0x1E	; 30
 722:	8c e2       	ldi	r24, 0x2C	; 44
 724:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	8d e2       	ldi	r24, 0x2D	; 45
 72c:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 730:	60 e4       	ldi	r22, 0x40	; 64
 732:	85 e1       	ldi	r24, 0x15	; 21
 734:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 738:	6d e3       	ldi	r22, 0x3D	; 61
 73a:	81 e1       	ldi	r24, 0x11	; 17
 73c:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 740:	84 e1       	ldi	r24, 0x14	; 20
 742:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 746:	98 2f       	mov	r25, r24
 748:	93 70       	andi	r25, 0x03	; 3
 74a:	29 f4       	brne	.+10     	; 0x756 <mfrc522_init+0x4a>
 74c:	68 2f       	mov	r22, r24
 74e:	63 60       	ori	r22, 0x03	; 3
 750:	84 e1       	ldi	r24, 0x14	; 20
 752:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 756:	08 95       	ret

Disassembly of section .text.mfrc522_to_card:

0000033c <mfrc522_to_card>:
 33c:	4f 92       	push	r4
 33e:	5f 92       	push	r5
 340:	6f 92       	push	r6
 342:	7f 92       	push	r7
 344:	8f 92       	push	r8
 346:	9f 92       	push	r9
 348:	af 92       	push	r10
 34a:	bf 92       	push	r11
 34c:	cf 92       	push	r12
 34e:	df 92       	push	r13
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	d8 2f       	mov	r29, r24
 35e:	7b 01       	movw	r14, r22
 360:	c4 2f       	mov	r28, r20
 362:	59 01       	movw	r10, r18
 364:	8c 30       	cpi	r24, 0x0C	; 12
 366:	29 f0       	breq	.+10     	; 0x372 <mfrc522_to_card+0x36>
 368:	8e 30       	cpi	r24, 0x0E	; 14
 36a:	61 f0       	breq	.+24     	; 0x384 <mfrc522_to_card+0x48>
 36c:	91 2c       	mov	r9, r1
 36e:	81 2c       	mov	r8, r1
 370:	10 c0       	rjmp	.+32     	; 0x392 <mfrc522_to_card+0x56>
 372:	0f 2e       	mov	r0, r31
 374:	f0 e3       	ldi	r31, 0x30	; 48
 376:	9f 2e       	mov	r9, r31
 378:	f0 2d       	mov	r31, r0
 37a:	0f 2e       	mov	r0, r31
 37c:	f7 e7       	ldi	r31, 0x77	; 119
 37e:	8f 2e       	mov	r8, r31
 380:	f0 2d       	mov	r31, r0
 382:	07 c0       	rjmp	.+14     	; 0x392 <mfrc522_to_card+0x56>
 384:	68 94       	set
 386:	99 24       	eor	r9, r9
 388:	94 f8       	bld	r9, 4
 38a:	0f 2e       	mov	r0, r31
 38c:	f2 e1       	ldi	r31, 0x12	; 18
 38e:	8f 2e       	mov	r8, r31
 390:	f0 2d       	mov	r31, r0
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 398:	68 2f       	mov	r22, r24
 39a:	6f 77       	andi	r22, 0x7F	; 127
 39c:	84 e0       	ldi	r24, 0x04	; 4
 39e:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 3a8:	68 2f       	mov	r22, r24
 3aa:	60 68       	ori	r22, 0x80	; 128
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 3ba:	41 2c       	mov	r4, r1
 3bc:	51 2c       	mov	r5, r1
 3be:	32 01       	movw	r6, r4
 3c0:	0c c0       	rjmp	.+24     	; 0x3da <mfrc522_to_card+0x9e>
 3c2:	f7 01       	movw	r30, r14
 3c4:	e4 0d       	add	r30, r4
 3c6:	f5 1d       	adc	r31, r5
 3c8:	60 81       	ld	r22, Z
 3ca:	89 e0       	ldi	r24, 0x09	; 9
 3cc:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	48 1a       	sub	r4, r24
 3d4:	58 0a       	sbc	r5, r24
 3d6:	68 0a       	sbc	r6, r24
 3d8:	78 0a       	sbc	r7, r24
 3da:	8c 2f       	mov	r24, r28
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	48 16       	cp	r4, r24
 3e4:	59 06       	cpc	r5, r25
 3e6:	6a 06       	cpc	r6, r26
 3e8:	7b 06       	cpc	r7, r27
 3ea:	58 f3       	brcs	.-42     	; 0x3c2 <mfrc522_to_card+0x86>
 3ec:	6d 2f       	mov	r22, r29
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 3f4:	dc 30       	cpi	r29, 0x0C	; 12
 3f6:	41 f4       	brne	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f8:	8d e0       	ldi	r24, 0x0D	; 13
 3fa:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 3fe:	68 2f       	mov	r22, r24
 400:	60 68       	ori	r22, 0x80	; 128
 402:	8d e0       	ldi	r24, 0x0D	; 13
 404:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 408:	0f 2e       	mov	r0, r31
 40a:	f0 ed       	ldi	r31, 0xD0	; 208
 40c:	cf 2e       	mov	r12, r31
 40e:	f7 e0       	ldi	r31, 0x07	; 7
 410:	df 2e       	mov	r13, r31
 412:	e1 2c       	mov	r14, r1
 414:	f1 2c       	mov	r15, r1
 416:	f0 2d       	mov	r31, r0
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 41e:	c8 2f       	mov	r28, r24
 420:	e1 e0       	ldi	r30, 0x01	; 1
 422:	ce 1a       	sub	r12, r30
 424:	d1 08       	sbc	r13, r1
 426:	e1 08       	sbc	r14, r1
 428:	f1 08       	sbc	r15, r1
 42a:	29 f0       	breq	.+10     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 42c:	80 fd       	sbrc	r24, 0
 42e:	03 c0       	rjmp	.+6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 430:	89 2d       	mov	r24, r9
 432:	8c 23       	and	r24, r28
 434:	89 f3       	breq	.-30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 436:	8d e0       	ldi	r24, 0x0D	; 13
 438:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 43c:	68 2f       	mov	r22, r24
 43e:	6f 77       	andi	r22, 0x7F	; 127
 440:	8d e0       	ldi	r24, 0x0D	; 13
 442:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 446:	cd 28       	or	r12, r13
 448:	ce 28       	or	r12, r14
 44a:	cf 28       	or	r12, r15
 44c:	09 f4       	brne	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44e:	60 c0       	rjmp	.+192    	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 450:	86 e0       	ldi	r24, 0x06	; 6
 452:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 456:	8b 71       	andi	r24, 0x1B	; 27
 458:	09 f0       	breq	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45a:	5c c0       	rjmp	.+184    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 45c:	c8 21       	and	r28, r8
 45e:	c0 fd       	sbrc	r28, 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	c1 e0       	ldi	r28, 0x01	; 1
 464:	01 c0       	rjmp	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 466:	c2 e0       	ldi	r28, 0x02	; 2
 468:	dc 30       	cpi	r29, 0x0C	; 12
 46a:	09 f0       	breq	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46c:	54 c0       	rjmp	.+168    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 474:	d8 2f       	mov	r29, r24
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 47c:	28 2f       	mov	r18, r24
 47e:	27 70       	andi	r18, 0x07	; 7
 480:	a9 f0       	breq	.+42     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 482:	8d 2f       	mov	r24, r29
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	82 0f       	add	r24, r18
 496:	91 1d       	adc	r25, r1
 498:	09 2e       	mov	r0, r25
 49a:	00 0c       	add	r0, r0
 49c:	aa 0b       	sbc	r26, r26
 49e:	bb 0b       	sbc	r27, r27
 4a0:	f8 01       	movw	r30, r16
 4a2:	80 83       	st	Z, r24
 4a4:	91 83       	std	Z+1, r25	; 0x01
 4a6:	a2 83       	std	Z+2, r26	; 0x02
 4a8:	b3 83       	std	Z+3, r27	; 0x03
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ac:	8d 2f       	mov	r24, r29
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	09 2e       	mov	r0, r25
 4be:	00 0c       	add	r0, r0
 4c0:	aa 0b       	sbc	r26, r26
 4c2:	bb 0b       	sbc	r27, r27
 4c4:	f8 01       	movw	r30, r16
 4c6:	80 83       	st	Z, r24
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	a2 83       	std	Z+2, r26	; 0x02
 4cc:	b3 83       	std	Z+3, r27	; 0x03
 4ce:	d1 11       	cpse	r29, r1
 4d0:	01 c0       	rjmp	.+2      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 4d2:	d1 e0       	ldi	r29, 0x01	; 1
 4d4:	d1 31       	cpi	r29, 0x11	; 17
 4d6:	08 f0       	brcs	.+2      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d8:	d0 e1       	ldi	r29, 0x10	; 16
 4da:	c1 2c       	mov	r12, r1
 4dc:	d1 2c       	mov	r13, r1
 4de:	76 01       	movw	r14, r12
 4e0:	0d c0       	rjmp	.+26     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4e2:	85 01       	movw	r16, r10
 4e4:	0c 0d       	add	r16, r12
 4e6:	1d 1d       	adc	r17, r13
 4e8:	89 e0       	ldi	r24, 0x09	; 9
 4ea:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 4ee:	f8 01       	movw	r30, r16
 4f0:	80 83       	st	Z, r24
 4f2:	ff ef       	ldi	r31, 0xFF	; 255
 4f4:	cf 1a       	sub	r12, r31
 4f6:	df 0a       	sbc	r13, r31
 4f8:	ef 0a       	sbc	r14, r31
 4fa:	ff 0a       	sbc	r15, r31
 4fc:	8d 2f       	mov	r24, r29
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	a0 e0       	ldi	r26, 0x00	; 0
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	c8 16       	cp	r12, r24
 506:	d9 06       	cpc	r13, r25
 508:	ea 06       	cpc	r14, r26
 50a:	fb 06       	cpc	r15, r27
 50c:	50 f3       	brcs	.-44     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 50e:	03 c0       	rjmp	.+6      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 510:	c3 e0       	ldi	r28, 0x03	; 3
 512:	01 c0       	rjmp	.+2      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 514:	c3 e0       	ldi	r28, 0x03	; 3
 516:	8c 2f       	mov	r24, r28
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	df 90       	pop	r13
 526:	cf 90       	pop	r12
 528:	bf 90       	pop	r11
 52a:	af 90       	pop	r10
 52c:	9f 90       	pop	r9
 52e:	8f 90       	pop	r8
 530:	7f 90       	pop	r7
 532:	6f 90       	pop	r6
 534:	5f 90       	pop	r5
 536:	4f 90       	pop	r4
 538:	08 95       	ret

Disassembly of section .text.mfrc522_request:

000005b2 <mfrc522_request>:
 5b2:	ef 92       	push	r14
 5b4:	ff 92       	push	r15
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <mfrc522_request+0xe>
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <mfrc522_request+0x10>
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	18 2f       	mov	r17, r24
 5c8:	7b 01       	movw	r14, r22
 5ca:	67 e0       	ldi	r22, 0x07	; 7
 5cc:	8d e0       	ldi	r24, 0x0D	; 13
 5ce:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 5d2:	f7 01       	movw	r30, r14
 5d4:	10 83       	st	Z, r17
 5d6:	8e 01       	movw	r16, r28
 5d8:	0f 5f       	subi	r16, 0xFF	; 255
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	97 01       	movw	r18, r14
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	b7 01       	movw	r22, r14
 5e2:	8c e0       	ldi	r24, 0x0C	; 12
 5e4:	0e 94 9e 01 	call	0x33c	; 0x33c <mfrc522_to_card>
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	51 f4       	brne	.+20     	; 0x600 <mfrc522_request+0x4e>
 5ec:	49 81       	ldd	r20, Y+1	; 0x01
 5ee:	5a 81       	ldd	r21, Y+2	; 0x02
 5f0:	6b 81       	ldd	r22, Y+3	; 0x03
 5f2:	7c 81       	ldd	r23, Y+4	; 0x04
 5f4:	40 31       	cpi	r20, 0x10	; 16
 5f6:	51 05       	cpc	r21, r1
 5f8:	61 05       	cpc	r22, r1
 5fa:	71 05       	cpc	r23, r1
 5fc:	19 f4       	brne	.+6      	; 0x604 <mfrc522_request+0x52>
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <mfrc522_request+0x54>
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	01 c0       	rjmp	.+2      	; 0x606 <mfrc522_request+0x54>
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	ef 90       	pop	r14
 61a:	08 95       	ret

Disassembly of section .text.mfrc522_get_card_serial:

0000053a <mfrc522_get_card_serial>:
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <mfrc522_get_card_serial+0xe>
 548:	00 d0       	rcall	.+0      	; 0x54a <mfrc522_get_card_serial+0x10>
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
 54e:	7c 01       	movw	r14, r24
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	8d e0       	ldi	r24, 0x0D	; 13
 554:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 558:	83 e9       	ldi	r24, 0x93	; 147
 55a:	f7 01       	movw	r30, r14
 55c:	80 83       	st	Z, r24
 55e:	80 e2       	ldi	r24, 0x20	; 32
 560:	81 83       	std	Z+1, r24	; 0x01
 562:	8e 01       	movw	r16, r28
 564:	0f 5f       	subi	r16, 0xFF	; 255
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	97 01       	movw	r18, r14
 56a:	42 e0       	ldi	r20, 0x02	; 2
 56c:	b7 01       	movw	r22, r14
 56e:	8c e0       	ldi	r24, 0x0C	; 12
 570:	0e 94 9e 01 	call	0x33c	; 0x33c <mfrc522_to_card>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	91 f4       	brne	.+36     	; 0x59c <mfrc522_get_card_serial+0x62>
 578:	07 c0       	rjmp	.+14     	; 0x588 <mfrc522_get_card_serial+0x4e>
 57a:	f7 01       	movw	r30, r14
 57c:	e9 0f       	add	r30, r25
 57e:	f1 1d       	adc	r31, r1
 580:	30 81       	ld	r19, Z
 582:	23 27       	eor	r18, r19
 584:	9f 5f       	subi	r25, 0xFF	; 255
 586:	02 c0       	rjmp	.+4      	; 0x58c <mfrc522_get_card_serial+0x52>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	94 30       	cpi	r25, 0x04	; 4
 58e:	a8 f3       	brcs	.-22     	; 0x57a <mfrc522_get_card_serial+0x40>
 590:	f7 01       	movw	r30, r14
 592:	e9 0f       	add	r30, r25
 594:	f1 1d       	adc	r31, r1
 596:	90 81       	ld	r25, Z
 598:	29 13       	cpse	r18, r25
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	0f 90       	pop	r0
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	ef 90       	pop	r14
 5b0:	08 95       	ret

Disassembly of section .text.CheckCard:

000006bc <CheckCard>:
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ec 01       	movw	r28, r24
 6c2:	64 e0       	ldi	r22, 0x04	; 4
 6c4:	71 e0       	ldi	r23, 0x01	; 1
 6c6:	82 e5       	ldi	r24, 0x52	; 82
 6c8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <mfrc522_request>
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	c1 f4       	brne	.+48     	; 0x700 <CheckCard+0x44>
 6d0:	84 e0       	ldi	r24, 0x04	; 4
 6d2:	91 e0       	ldi	r25, 0x01	; 1
 6d4:	0e 94 9d 02 	call	0x53a	; 0x53a <mfrc522_get_card_serial>
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	69 f0       	breq	.+26     	; 0x6f6 <CheckCard+0x3a>
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	13 c0       	rjmp	.+38     	; 0x706 <CheckCard+0x4a>
 6e0:	28 81       	ld	r18, Y
 6e2:	e8 2f       	mov	r30, r24
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	ec 5f       	subi	r30, 0xFC	; 252
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	90 81       	ld	r25, Z
 6ec:	29 13       	cpse	r18, r25
 6ee:	0a c0       	rjmp	.+20     	; 0x704 <CheckCard+0x48>
 6f0:	21 96       	adiw	r28, 0x01	; 1
 6f2:	8f 5f       	subi	r24, 0xFF	; 255
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <CheckCard+0x3c>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	84 30       	cpi	r24, 0x04	; 4
 6fa:	90 f3       	brcs	.-28     	; 0x6e0 <CheckCard+0x24>
 6fc:	85 e0       	ldi	r24, 0x05	; 5
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <CheckCard+0x4a>
 700:	82 e0       	ldi	r24, 0x02	; 2
 702:	01 c0       	rjmp	.+2      	; 0x706 <CheckCard+0x4a>
 704:	84 e0       	ldi	r24, 0x04	; 4
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

Disassembly of section .text.GPIO_Init:

0000093e <GPIO_Init>:
	else return CARD_NOT_FOUND;
}
void GPIO_Init()
{
	//Keypad
	DDRD = 0xF8;
 93e:	88 ef       	ldi	r24, 0xF8	; 248
 940:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x07;
 942:	87 e0       	ldi	r24, 0x07	; 7
 944:	8b b9       	out	0x0b, r24	; 11
	//LED
	DDRC = (1<<Green_Led)|(1<<Red_Led);
 946:	83 e0       	ldi	r24, 0x03	; 3
 948:	87 b9       	out	0x07, r24	; 7
	PORTC = !((1<<Green_Led)|(1<<Red_Led));
 94a:	18 b8       	out	0x08, r1	; 8
 94c:	08 95       	ret

Disassembly of section .text.On_LED:

000008ea <On_LED>:
		data++;
	}
	
	TWCR = TWI_READ_NACK;											//TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	*data = TWDR;
 8ea:	98 b1       	in	r25, 0x08	; 8
 8ec:	21 e0       	ldi	r18, 0x01	; 1
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <On_LED+0xc>
 8f2:	22 0f       	add	r18, r18
 8f4:	33 1f       	adc	r19, r19
 8f6:	8a 95       	dec	r24
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <On_LED+0x8>
 8fa:	29 2b       	or	r18, r25
 8fc:	28 b9       	out	0x08, r18	; 8
 8fe:	08 95       	ret

Disassembly of section .text.Off_LED:

000008ba <Off_LED>:
 8ba:	98 b1       	in	r25, 0x08	; 8
 8bc:	21 e0       	ldi	r18, 0x01	; 1
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <Off_LED+0xc>
 8c2:	22 0f       	add	r18, r18
 8c4:	33 1f       	adc	r19, r19
 8c6:	8a 95       	dec	r24
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <Off_LED+0x8>
 8ca:	20 95       	com	r18
 8cc:	29 23       	and	r18, r25
 8ce:	28 b9       	out	0x08, r18	; 8
 8d0:	08 95       	ret

Disassembly of section .text.Uart_Init:

000008d2 <Uart_Init>:
 8d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 8d6:	83 e3       	ldi	r24, 0x33	; 51
 8d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 8dc:	86 e0       	ldi	r24, 0x06	; 6
 8de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 8e2:	88 e0       	ldi	r24, 0x08	; 8
 8e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 8e8:	08 95       	ret

Disassembly of section .text.Uart_Tx:

00000872 <Uart_Tx>:
 872:	fc 01       	movw	r30, r24
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	09 c0       	rjmp	.+18     	; 0x88c <Uart_Tx+0x1a>
 87a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 87e:	95 ff       	sbrs	r25, 5
 880:	fc cf       	rjmp	.-8      	; 0x87a <Uart_Tx+0x8>
 882:	81 91       	ld	r24, Z+
 884:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 888:	2f 5f       	subi	r18, 0xFF	; 255
 88a:	3f 4f       	sbci	r19, 0xFF	; 255
 88c:	46 2f       	mov	r20, r22
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	24 17       	cp	r18, r20
 892:	35 07       	cpc	r19, r21
 894:	94 f3       	brlt	.-28     	; 0x87a <Uart_Tx+0x8>
 896:	08 95       	ret

Disassembly of section .text.main:

0000013a <main>:
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x6>
 140:	00 d0       	rcall	.+0      	; 0x142 <main+0x8>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	0e 94 9f 04 	call	0x93e	; 0x93e <GPIO_Init>
 14a:	0e 94 ae 04 	call	0x95c	; 0x95c <TWI_Init>
 14e:	0e 94 a7 04 	call	0x94e	; 0x94e <SPI_Init>
 152:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Uart_Init>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 e6       	ldi	r24, 0x69	; 105
 15a:	98 e1       	ldi	r25, 0x18	; 24
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x22>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x2c>
 166:	00 00       	nop
 168:	0e 94 86 03 	call	0x70c	; 0x70c <mfrc522_init>
 16c:	0e 94 ef 03 	call	0x7de	; 0x7de <LCD_Init>
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 178:	47 e0       	ldi	r20, 0x07	; 7
 17a:	6e ec       	ldi	r22, 0xCE	; 206
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	89 e0       	ldi	r24, 0x09	; 9
 188:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 18c:	47 e0       	ldi	r20, 0x07	; 7
 18e:	67 ed       	ldi	r22, 0xD7	; 215
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	68 2f       	mov	r22, r24
 1a4:	60 62       	ori	r22, 0x20	; 32
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 4c 04 	call	0x898	; 0x898 <mfrc522_read>
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	68 2f       	mov	r22, r24
 1b8:	60 68       	ori	r22, 0x80	; 128
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	0e 94 26 04 	call	0x84c	; 0x84c <mfrc522_write>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	83 ed       	ldi	r24, 0xD3	; 211
 1c4:	90 e3       	ldi	r25, 0x30	; 48
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x8c>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x96>
 1d0:	00 00       	nop
 1d2:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Clear>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 1de:	4c e0       	ldi	r20, 0x0C	; 12
 1e0:	6f ed       	ldi	r22, 0xDF	; 223
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 1f2:	4e e0       	ldi	r20, 0x0E	; 14
 1f4:	6d ee       	ldi	r22, 0xED	; 237
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	82 e4       	ldi	r24, 0x42	; 66
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	9c 83       	std	Y+4, r25	; 0x04
 20c:	8b 83       	std	Y+3, r24	; 0x03
 20e:	89 e1       	ldi	r24, 0x19	; 25
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 5e 03 	call	0x6bc	; 0x6bc <CheckCard>
 216:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ID_Card>
 21a:	85 30       	cpi	r24, 0x05	; 5
 21c:	21 f4       	brne	.+8      	; 0x226 <main+0xec>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state>
 224:	05 c0       	rjmp	.+10     	; 0x230 <main+0xf6>
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	19 f4       	brne	.+6      	; 0x230 <main+0xf6>
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <state>
 230:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	61 f5       	brne	.+88     	; 0x290 <main+0x156>
 238:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Clear>
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 244:	4d e0       	ldi	r20, 0x0D	; 13
 246:	6c ef       	ldi	r22, 0xFC	; 252
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 75 04 	call	0x8ea	; 0x8ea <On_LED>
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 25e:	40 e1       	ldi	r20, 0x10	; 16
 260:	6a e0       	ldi	r22, 0x0A	; 10
 262:	71 e0       	ldi	r23, 0x01	; 1
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	ce 01       	movw	r24, r28
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	0e 94 39 04 	call	0x872	; 0x872 <Uart_Tx>
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	87 ea       	ldi	r24, 0xA7	; 167
 278:	91 e6       	ldi	r25, 0x61	; 97
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x140>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x14a>
 284:	00 00       	nop
 286:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Clear>
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Off_LED>
 290:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	61 f5       	brne	.+88     	; 0x2f0 <main+0x1b6>
 298:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Clear>
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	6c e1       	ldi	r22, 0x1C	; 28
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 75 04 	call	0x8ea	; 0x8ea <On_LED>
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 2be:	40 e1       	ldi	r20, 0x10	; 16
 2c0:	67 e2       	ldi	r22, 0x27	; 39
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	ce 01       	movw	r24, r28
 2ce:	03 96       	adiw	r24, 0x03	; 3
 2d0:	0e 94 39 04 	call	0x872	; 0x872 <Uart_Tx>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	87 ea       	ldi	r24, 0xA7	; 167
 2d8:	91 e6       	ldi	r25, 0x61	; 97
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x1a0>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x1aa>
 2e4:	00 00       	nop
 2e6:	0e 94 95 04 	call	0x92a	; 0x92a <LCD_Clear>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Off_LED>
 2f0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <state>
 2f4:	88 23       	and	r24, r24
 2f6:	c1 f0       	breq	.+48     	; 0x328 <main+0x1ee>
 2f8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <state>
 2fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <index>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 308:	4c e0       	ldi	r20, 0x0C	; 12
 30a:	6f ed       	ldi	r22, 0xDF	; 223
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 0b 04 	call	0x816	; 0x816 <LCD_SetCursor>
 31c:	4e e0       	ldi	r20, 0x0E	; 14
 31e:	6d ee       	ldi	r22, 0xED	; 237
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_String>
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	80 e7       	ldi	r24, 0x70	; 112
 32c:	92 e0       	ldi	r25, 0x02	; 2
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	80 40       	sbci	r24, 0x00	; 0
 332:	90 40       	sbci	r25, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <main+0x1f4>
 336:	00 c0       	rjmp	.+0      	; 0x338 <main+0x1fe>
 338:	00 00       	nop
 33a:	69 cf       	rjmp	.-302    	; 0x20e <main+0xd4>

Disassembly of section .text.__dummy_fini:

00000992 <_fini>:
 992:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000994 <__funcs_on_exit>:
 994:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000996 <__simulator_exit>:
 996:	08 95       	ret

Disassembly of section .text.exit:

00000900 <exit>:
 900:	ec 01       	movw	r28, r24
 902:	0e 94 ca 04 	call	0x994	; 0x994 <__funcs_on_exit>
 906:	0e 94 c9 04 	call	0x992	; 0x992 <_fini>
 90a:	ce 01       	movw	r24, r28
 90c:	0e 94 cb 04 	call	0x996	; 0x996 <__simulator_exit>
 910:	ce 01       	movw	r24, r28
 912:	0e 94 c7 04 	call	0x98e	; 0x98e <_Exit>

Disassembly of section .text._Exit:

0000098e <_Exit>:
 98e:	0e 94 65 00 	call	0xca	; 0xca <_exit>
